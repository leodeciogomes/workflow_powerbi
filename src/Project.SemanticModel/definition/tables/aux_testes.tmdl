table aux_testes
	lineageTag: 7f35fd94-5c1b-432c-8c82-0e5b6867a9a6

	column test_name
		dataType: string
		lineageTag: 6ca46218-4981-4753-8487-c25622f27e66
		summarizeBy: none
		sourceColumn: test_name

		annotation SummarizationSetBy = Automatic

	column query_m
		dataType: string
		lineageTag: 0c2c00bd-3767-4a48-8f71-9a73eb3a8f97
		summarizeBy: none
		sourceColumn: query_m

		annotation SummarizationSetBy = Automatic

	column expected_value
		dataType: string
		lineageTag: 8d5d559f-8a4d-4f95-a2a0-8ea339011221
		summarizeBy: none
		sourceColumn: expected_value

		annotation SummarizationSetBy = Automatic

	column actual_value
		dataType: string
		lineageTag: 941c3f4a-8395-44e0-a590-55eced31fb97
		summarizeBy: none
		sourceColumn: actual_value

		annotation SummarizationSetBy = Automatic

	column result
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 87664805-ec49-45d3-b1e7-9b4e0f27779f
		summarizeBy: none
		sourceColumn: result

		annotation SummarizationSetBy = Automatic

	column category
		dataType: string
		lineageTag: 9d241c0e-c5b1-475f-a93a-d4ff6fef95e4
		summarizeBy: none
		sourceColumn: category

		annotation SummarizationSetBy = Automatic

	partition aux_testes = m
		mode: import
		source =
				let
				    // Ambiente de avaliação com todas as dependências da linguagem M
				    env = [
				        Table.RowCount = Table.RowCount,
				        Table.SelectRows = Table.SelectRows,
				        List.Count = List.Count,
				        List.Distinct = List.Distinct,
				        List.Sum = List.Sum,
				        dim_calendario = dim_calendario
				    ],
				
				    // Testes unitários desejados
				    testCases = {
				        [
				            test_name = "Contagem de linhas da tabela calendário",
				            category = "Dimensões",
				            expected_value = 365,
				            query_m = "Table.RowCount(dim_calendario)"
				        ],
				        [
				            test_name = "Contagem de meses distintos",
				            category = "Dimensões",
				            expected_value = 12,
				            query_m = "List.Count(List.Distinct(dim_calendario[mesNum]))"
				        ]
				    },
				
				    // Converter para tabela
				    TestTable = Table.FromRecords(testCases),
				
				    // Avaliar string [query_m] interpretando como linguagem M
				    WithActual = Table.AddColumn(TestTable, "actual_value", each try Expression.Evaluate([query_m], env) otherwise "ERROR"),
				
				    // Alterar tipo
				    Typed = Table.TransformColumnTypes(WithActual, {
				        {"test_name", type text},
				        {"category", type text},
				        {"query_m", type text},
				        {"expected_value", type text},
				        {"actual_value", type text}
				    }),
				
				    // Comparar resultados
				    WithResult = Table.AddColumn(Typed, "result", each [expected_value] = [actual_value], type logical)
				in
				    WithResult

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

